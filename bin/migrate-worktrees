#!/bin/bash

# Migrate existing worktrees to centralized location

set -e

WORKTREES_DIR="$HOME/worktrees"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to migrate worktrees from a specific repo
migrate_repo_worktrees() {
    local repo_path="$1"
    local repo_name=$(basename "$repo_path")
    
    log_info "Migrating worktrees for $repo_name..."
    
    # Check for worktrees in the repo's worktrees directory
    local worktrees_dir="$repo_path/worktrees"
    if [[ -d "$worktrees_dir" ]]; then
        for worktree in "$worktrees_dir"/*; do
            if [[ -d "$worktree" ]]; then
                local branch_name=$(basename "$worktree")
                local new_path="$WORKTREES_DIR/$repo_name/$branch_name"
                
                log_info "Migrating $repo_name/$branch_name..."
                
                # Create the new directory structure
                mkdir -p "$(dirname "$new_path")"
                
                # Move the worktree
                mv "$worktree" "$new_path"
                
                # Update the git worktree reference
                cd "$repo_path"
                git worktree move "$new_path" "$new_path" 2>/dev/null || {
                    log_warning "Could not update git worktree reference for $new_path"
                }
                
                log_success "Migrated $repo_name/$branch_name to $new_path"
            fi
        done
        
        # Remove empty worktrees directory
        rmdir "$worktrees_dir" 2>/dev/null || true
    fi
}

# Main migration
log_info "Starting worktree migration to $WORKTREES_DIR..."

# Create the centralized directory
mkdir -p "$WORKTREES_DIR"

# Find all repos in ~/work/elephant
for repo in ~/work/elephant/*; do
    if [[ -d "$repo" ]] && [[ -d "$repo/.git" ]]; then
        migrate_repo_worktrees "$repo"
    fi
done

log_success "Worktree migration completed!"
log_info "You can now use 'wt list' to see all your worktrees"
log_info "Use 'wt cd <repo-name> <branch-name>' to switch to a worktree"
