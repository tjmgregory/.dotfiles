#!/bin/bash

# Worktree Management Script
# Standardized worktree creation and management

set -e

# Worktrees are now stored in each repo's .worktrees directory
# This function finds the worktrees directory for a given repo
get_worktrees_dir() {
    local repo_path="$1"
    echo "$repo_path/.worktrees"
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
usage() {
    echo "Usage: wt <command> [options]"
    echo ""
    echo "Commands:"
    echo "  create <repo-name|repo-path> <branch-name>    Create a new worktree"
    echo "  ls [repo-name]                               List worktrees (optionally filter by repo)"
    echo "  rm <repo-name> <branch-name>                 Remove a worktree"
    echo "  clean                                        Clean up orphaned worktrees"
    echo "  cd <repo-name> <branch-name>                 Change to worktree directory"
    echo ""
    echo "Examples:"
    echo "  wt create api-patient feature-auth"
    echo "  wt create ~/work/elephant/api-patient feature-auth"
    echo "  wt ls api-patient"
    echo "  wt rm api-patient feature-auth"
    echo "  wt cd api-patient feature-auth"
}

# Create a new worktree
create_worktree() {
    local repo_input="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_input" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt create <repo-name|repo-path> <branch-name>"
        return 1
    fi
    
    local repo_path=""
    
    # Check if it's a full path
    if [[ "$repo_input" == /* ]] && [[ -d "$repo_input" ]]; then
        repo_path="$repo_input"
    else
        # Try to find by repo name
        repo_path=$(find_repo_by_name "$repo_input")
        if [[ -z "$repo_path" ]]; then
            log_error "Repository not found: $repo_input"
            log_error "Try using the full path or check available repos with 'wt ls'"
            return 1
        fi
    fi
    
    # Get repo name from path
    local repo_name=$(basename "$repo_path")
    
    # Create worktree directory in .worktrees
    local worktrees_dir=$(get_worktrees_dir "$repo_path")
    local worktree_path="$worktrees_dir/$branch_name"
    
    if [[ -d "$worktree_path" ]]; then
        log_warning "Worktree already exists: $worktree_path"
        return 1
    fi
    
    log_info "Creating worktree for $repo_name/$branch_name..."
    
    # Create the worktrees directory if it doesn't exist
    mkdir -p "$worktrees_dir"
    
    # Create the worktree
    cd "$repo_path"
    git worktree add "$worktree_path" "$branch_name" 2>/dev/null || {
        # If branch doesn't exist, create it
        log_info "Branch $branch_name doesn't exist, creating it..."
        git worktree add -b "$branch_name" "$worktree_path"
    }
    
    log_success "Created worktree: $worktree_path"
    log_info "To switch to it: cd $worktree_path"
}

# Get all search directories for repositories
get_search_dirs() {
    local search_dirs=()
    
    # Add ~/work/*/* directories (work contains folders which contain git repos)
    if [[ -d "$HOME/work" ]]; then
        for work_folder in "$HOME/work"/*; do
            if [[ -d "$work_folder" ]]; then
                for repo in "$work_folder"/*; do
                    if [[ -d "$repo" ]] && [[ -d "$repo/.git" ]]; then
                        search_dirs+=("$(dirname "$repo")")
                    fi
                done
            fi
        done
    fi
    
    # Add ~/projects (projects contains git repos directly)
    if [[ -d "$HOME/projects" ]]; then
        search_dirs+=("$HOME/projects")
    fi
    
    # Remove duplicates and sort
    printf '%s\n' "${search_dirs[@]}" | sort -u
}

# Find a repository by name across all search directories
find_repo_by_name() {
    local repo_name="$1"
    
    while IFS= read -r search_dir; do
        for repo in "$search_dir"/*; do
            if [[ -d "$repo" ]] && [[ "$(basename "$repo")" == "$repo_name" ]]; then
                echo "$repo"
                return 0
            fi
        done
    done < <(get_search_dirs)
    
    return 1
}

# List worktrees
list_worktrees() {
    local filter="$1"
    
    if [[ -n "$filter" ]]; then
        log_info "Worktrees for $filter:"
        local repo_path
        repo_path=$(find_repo_by_name "$filter")
        
        if [[ -n "$repo_path" ]]; then
            local worktrees_dir=$(get_worktrees_dir "$repo_path")
            if [[ -d "$worktrees_dir" ]]; then
                for branch in "$worktrees_dir"/*; do
                    if [[ -d "$branch" ]]; then
                        local branch_name=$(basename "$branch")
                        echo "  $filter/$branch_name -> $branch"
                    fi
                done
            else
                log_warning "No worktrees found for $filter"
            fi
        else
            log_warning "Repository not found: $filter"
        fi
    else
        log_info "All worktrees:"
        local found_any=false
        
        while IFS= read -r search_dir; do
            for repo in "$search_dir"/*; do
                if [[ -d "$repo" ]] && [[ -d "$repo/.git" ]]; then
                    local repo_name=$(basename "$repo")
                    local worktrees_dir=$(get_worktrees_dir "$repo")
                    if [[ -d "$worktrees_dir" ]]; then
                        local parent_dir=$(basename "$(dirname "$repo")")
                        echo "  $parent_dir/$repo_name:"
                        for branch in "$worktrees_dir"/*; do
                            if [[ -d "$branch" ]]; then
                                local branch_name=$(basename "$branch")
                                echo "    $branch_name -> $branch"
                                found_any=true
                            fi
                        done
                    fi
                fi
            done
        done < <(get_search_dirs)
        
        if [[ "$found_any" == "false" ]]; then
            log_info "No worktrees found"
        fi
    fi
}

# Remove a worktree
remove_worktree() {
    local repo_name="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_name" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt remove <repo-name> <branch-name>"
        return 1
    fi
    
    # Find the main repo
    local main_repo
    main_repo=$(find_repo_by_name "$repo_name")
    
    if [[ -z "$main_repo" ]]; then
        log_error "Repository not found: $repo_name"
        return 1
    fi
    
    local worktrees_dir=$(get_worktrees_dir "$main_repo")
    local worktree_path="$worktrees_dir/$branch_name"
    
    if [[ ! -d "$worktree_path" ]]; then
        log_error "Worktree not found: $worktree_path"
        return 1
    fi
    
    log_info "Removing worktree: $worktree_path"
    
    cd "$main_repo"
    git worktree remove "$worktree_path" --force
    
    # Clean up empty worktrees directory
    rmdir "$worktrees_dir" 2>/dev/null || true
    
    log_success "Removed worktree: $worktree_path"
}

# Clean up orphaned worktrees
clean_worktrees() {
    log_info "Cleaning up orphaned worktrees..."
    
    local cleaned=0
    
    while IFS= read -r search_dir; do
        for repo in "$search_dir"/*; do
            if [[ -d "$repo" ]] && [[ -d "$repo/.git" ]]; then
                local repo_name=$(basename "$repo")
                local worktrees_dir=$(get_worktrees_dir "$repo")
                
                if [[ -d "$worktrees_dir" ]]; then
                    for branch in "$worktrees_dir"/*; do
                        if [[ -d "$branch" ]]; then
                            local branch_name=$(basename "$branch")
                            local worktree_path="$branch"
                            
                            # Check if this is still a valid worktree
                            if [[ ! -d "$worktree_path/.git" ]]; then
                                log_info "Removing orphaned worktree: $worktree_path"
                                rm -rf "$worktree_path"
                                ((cleaned++))
                            fi
                        fi
                    done
                    
                    # Remove empty worktrees directory
                    rmdir "$worktrees_dir" 2>/dev/null || true
                fi
            fi
        done
    done < <(get_search_dirs)
    
    if [[ $cleaned -eq 0 ]]; then
        log_info "No orphaned worktrees found"
    else
        log_success "Cleaned up $cleaned orphaned worktrees"
    fi
}

# Change to worktree directory
cd_worktree() {
    local repo_name="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_name" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt cd <repo-name> <branch-name>"
        return 1
    fi
    
    # Find the main repo
    local main_repo
    main_repo=$(find_repo_by_name "$repo_name")
    
    if [[ -z "$main_repo" ]]; then
        log_error "Repository not found: $repo_name"
        return 1
    fi
    
    local worktrees_dir=$(get_worktrees_dir "$main_repo")
    local worktree_path="$worktrees_dir/$branch_name"
    
    if [[ ! -d "$worktree_path" ]]; then
        log_error "Worktree not found: $worktree_path"
        return 1
    fi
    
    log_info "Switching to worktree: $worktree_path"
    cd "$worktree_path"
}

# Main command handling
case "$1" in
    "create")
        create_worktree "$2" "$3"
        ;;
    "ls"|"list")
        list_worktrees "$2"
        ;;
    "rm"|"remove")
        remove_worktree "$2" "$3"
        ;;
    "clean")
        clean_worktrees
        ;;
    "cd")
        cd_worktree "$2" "$3"
        ;;
    *)
        usage
        ;;
esac
