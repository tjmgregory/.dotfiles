#!/bin/bash

# Worktree Management Script
# Standardized worktree creation and management

set -e

WORKTREES_DIR="$HOME/worktrees"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
usage() {
    echo "Usage: wt <command> [options]"
    echo ""
    echo "Commands:"
    echo "  create <repo-path> <branch-name>    Create a new worktree"
    echo "  list [repo-name]                    List worktrees (optionally filter by repo)"
    echo "  remove <repo-name> <branch-name>    Remove a worktree"
    echo "  clean                               Clean up orphaned worktrees"
    echo "  cd <repo-name> <branch-name>        Change to worktree directory"
    echo ""
    echo "Examples:"
    echo "  wt create ~/work/elephant/api-patient feature-auth"
    echo "  wt list api-patient"
    echo "  wt remove api-patient feature-auth"
    echo "  wt cd api-patient feature-auth"
}

# Create a new worktree
create_worktree() {
    local repo_path="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_path" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt create <repo-path> <branch-name>"
        return 1
    fi
    
    if [[ ! -d "$repo_path" ]]; then
        log_error "Repository not found: $repo_path"
        return 1
    fi
    
    # Get repo name from path
    local repo_name=$(basename "$repo_path")
    
    # Create worktree directory
    local worktree_path="$WORKTREES_DIR/$repo_name/$branch_name"
    
    if [[ -d "$worktree_path" ]]; then
        log_warning "Worktree already exists: $worktree_path"
        return 1
    fi
    
    log_info "Creating worktree for $repo_name/$branch_name..."
    
    # Create the directory structure
    mkdir -p "$(dirname "$worktree_path")"
    
    # Create the worktree
    cd "$repo_path"
    git worktree add "$worktree_path" "$branch_name" 2>/dev/null || {
        # If branch doesn't exist, create it
        log_info "Branch $branch_name doesn't exist, creating it..."
        git worktree add -b "$branch_name" "$worktree_path"
    }
    
    log_success "Created worktree: $worktree_path"
    log_info "To switch to it: cd $worktree_path"
}

# List worktrees
list_worktrees() {
    local filter="$1"
    
    if [[ -n "$filter" ]]; then
        log_info "Worktrees for $filter:"
        if [[ -d "$WORKTREES_DIR/$filter" ]]; then
            for branch in "$WORKTREES_DIR/$filter"/*; do
                if [[ -d "$branch" ]]; then
                    local branch_name=$(basename "$branch")
                    echo "  $filter/$branch_name -> $branch"
                fi
            done
        else
            log_warning "No worktrees found for $filter"
        fi
    else
        log_info "All worktrees:"
        if [[ -d "$WORKTREES_DIR" ]]; then
            for repo in "$WORKTREES_DIR"/*; do
                if [[ -d "$repo" ]]; then
                    local repo_name=$(basename "$repo")
                    echo "  $repo_name:"
                    for branch in "$repo"/*; do
                        if [[ -d "$branch" ]]; then
                            local branch_name=$(basename "$branch")
                            echo "    $branch_name -> $branch"
                        fi
                    done
                fi
            done
        else
            log_info "No worktrees found"
        fi
    fi
}

# Remove a worktree
remove_worktree() {
    local repo_name="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_name" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt remove <repo-name> <branch-name>"
        return 1
    fi
    
    local worktree_path="$WORKTREES_DIR/$repo_name/$branch_name"
    
    if [[ ! -d "$worktree_path" ]]; then
        log_error "Worktree not found: $worktree_path"
        return 1
    fi
    
    log_info "Removing worktree: $worktree_path"
    
    # Find the main repo to remove the worktree properly
    local main_repo=""
    for repo in ~/work/elephant/*; do
        if [[ -d "$repo" ]] && [[ "$(basename "$repo")" == "$repo_name" ]]; then
            main_repo="$repo"
            break
        fi
    done
    
    if [[ -n "$main_repo" ]]; then
        cd "$main_repo"
        git worktree remove "$worktree_path" --force
    else
        log_warning "Could not find main repo for $repo_name, removing directory only"
        rm -rf "$worktree_path"
    fi
    
    # Clean up empty directories
    rmdir "$(dirname "$worktree_path")" 2>/dev/null || true
    rmdir "$WORKTREES_DIR/$repo_name" 2>/dev/null || true
    
    log_success "Removed worktree: $worktree_path"
}

# Clean up orphaned worktrees
clean_worktrees() {
    log_info "Cleaning up orphaned worktrees..."
    
    if [[ ! -d "$WORKTREES_DIR" ]]; then
        log_info "No worktrees directory found"
        return 0
    fi
    
    local cleaned=0
    
    for repo in "$WORKTREES_DIR"/*; do
        if [[ -d "$repo" ]]; then
            local repo_name=$(basename "$repo")
            
            for branch in "$repo"/*; do
                if [[ -d "$branch" ]]; then
                    local branch_name=$(basename "$branch")
                    local worktree_path="$branch"
                    
                    # Check if this is still a valid worktree
                    if [[ ! -d "$worktree_path/.git" ]]; then
                        log_info "Removing orphaned worktree: $worktree_path"
                        rm -rf "$worktree_path"
                        ((cleaned++))
                    fi
                fi
            done
            
            # Remove empty repo directory
            rmdir "$repo" 2>/dev/null || true
        fi
    done
    
    if [[ $cleaned -eq 0 ]]; then
        log_info "No orphaned worktrees found"
    else
        log_success "Cleaned up $cleaned orphaned worktrees"
    fi
}

# Change to worktree directory
cd_worktree() {
    local repo_name="$1"
    local branch_name="$2"
    
    if [[ -z "$repo_name" ]] || [[ -z "$branch_name" ]]; then
        log_error "Usage: wt cd <repo-name> <branch-name>"
        return 1
    fi
    
    local worktree_path="$WORKTREES_DIR/$repo_name/$branch_name"
    
    if [[ ! -d "$worktree_path" ]]; then
        log_error "Worktree not found: $worktree_path"
        return 1
    fi
    
    log_info "Switching to worktree: $worktree_path"
    cd "$worktree_path"
}

# Main command handling
case "$1" in
    "create")
        create_worktree "$2" "$3"
        ;;
    "list")
        list_worktrees "$2"
        ;;
    "remove")
        remove_worktree "$2" "$3"
        ;;
    "clean")
        clean_worktrees
        ;;
    "cd")
        cd_worktree "$2" "$3"
        ;;
    *)
        usage
        ;;
esac
